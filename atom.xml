<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冰棍工作室</title>
  
  <subtitle>python | STM32 | 树莓派 |51</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://izhen.tech/"/>
  <updated>2019-03-01T09:01:04.000Z</updated>
  <id>http://izhen.tech/</id>
  
  <author>
    <name>zhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>24题一组数据交换相邻节点</title>
    <link href="http://izhen.tech/2019/03/01/24%E9%A2%98%E4%B8%80%E7%BB%84%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E8%8A%82%E7%82%B9/"/>
    <id>http://izhen.tech/2019/03/01/24题一组数据交换相邻节点/</id>
    <published>2019-03-01T08:49:57.000Z</published>
    <updated>2019-03-01T09:01:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交换相邻节点"><a href="#交换相邻节点" class="headerlink" title="交换相邻节点"></a>交换相邻节点</h2><blockquote><p>难度：中等     思路：递归     </p></blockquote><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><a id="more"></a> <p><strong>示例:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><p>链表中节点的交换是传统问题，两个指针解决问题，唯一要注意的是不能在交换过程中把链表给断开了，否则岂不是得不偿失？暴力法本可以解决一切，但是优雅的方法是递归，把相邻节点的交换搞定，然后递归把所有的节点串起来，简直是美滋滋啊。</p><h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span>        </span><br><span class="line">        <span class="comment"># 防止只有一个节点或没有节点时报错</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">and</span> head.next:</span><br><span class="line">            p = head</span><br><span class="line">            q = head.next</span><br><span class="line">            head = q</span><br><span class="line">            <span class="comment"># 第一次交换不需要考虑与前面的连接 三步法连接</span></span><br><span class="line">            p.next = q.next</span><br><span class="line">            q.next = p </span><br><span class="line">            <span class="comment"># 开始递归</span></span><br><span class="line">            p.next = self.swapPairs(p.next)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> head:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;交换相邻节点&quot;&gt;&lt;a href=&quot;#交换相邻节点&quot; class=&quot;headerlink&quot; title=&quot;交换相邻节点&quot;&gt;&lt;/a&gt;交换相邻节点&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;难度：中等     思路：递归     &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、题目描述&quot;&gt;&lt;a href=&quot;#一、题目描述&quot; class=&quot;headerlink&quot; title=&quot;一、题目描述&quot;&gt;&lt;/a&gt;一、题目描述&lt;/h3&gt;&lt;p&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你不能只是单纯的改变节点内部的值&lt;/strong&gt;，而是需要实际的进行节点交换。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://izhen.tech/categories/LeetCode/"/>
    
    
      <category term="递归" scheme="http://izhen.tech/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="链表" scheme="http://izhen.tech/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="交换" scheme="http://izhen.tech/tags/%E4%BA%A4%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>23题合并k个有序的链表</title>
    <link href="http://izhen.tech/2019/03/01/23%E9%A2%98%E5%90%88%E5%B9%B6k%E4%B8%AA%E6%9C%89%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>http://izhen.tech/2019/03/01/23题合并k个有序的链表/</id>
    <published>2019-03-01T08:11:22.000Z</published>
    <updated>2019-03-01T08:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合并K个有序的链表"><a href="#合并K个有序的链表" class="headerlink" title="合并K个有序的链表"></a>合并K个有序的链表</h2><blockquote><p>难度： hard模式                                   思路：优先级队列</p></blockquote><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>合并 <em>k</em> 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p><strong>示例:</strong></p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><p>首先是hard模式，说明不能轻易的解决这个问题。认真思考了一个小时，觉得已经理清楚思路，然而苦于不知该如何实现自己的思路。试了几种方法，反而是原地打转，于是决定参考一下答案。答案实现了我的思路，原来使用了一种之前没有用过的数据结构，优先级队列(<code>PrivirotyQueue</code>),这一篇<a href="https://zhuanlan.zhihu.com/p/37637660" target="_blank" rel="noopener">专栏</a>简单介绍了优先级队列，对于理解这题，简直是正中靶心。</p><p>思路如下：</p><p>用三个指针指向k个链表的头部，比较指针中的值，将最小的值加入到结果中，然后指针后移，直到所有的指针为空。由于是列表，无法直接得到所有链表的头部，所以只能通过优先级队列来做。遍历列表，将头指针和头指针的val组成一个元组入队列，出队列时头指针的val作为评判其优先级的标准。<strong>注意事项，当队列中的元组优先级(即头指针的val)相同时，将会把指针这个对象作为比较优先级的评判标准</strong>，但是对象在python中是不能直接比较的，会引起代码崩溃，元组之间的元素用逗号隔开，不能有空格，否则代码也会崩溃。</p><h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue <span class="keyword">as</span> PQ</span><br><span class="line"><span class="comment"># 导入优先级队列的包</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        head = point = ListNode(<span class="number">0</span>)</span><br><span class="line">        pq = PQ()</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> l:</span><br><span class="line">                <span class="comment"># 当列表的优先级相同(即val相等）时，由元祖中的第二个元素确定优先级，</span></span><br><span class="line">                <span class="comment"># 而链表是对象不能直接确定优先级，所以加入一个变化的下标作为优先级避免程序崩溃</span></span><br><span class="line">                pq.put((l.val,index,l))</span><br><span class="line">                index += <span class="number">1</span>                        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> pq.empty():</span><br><span class="line">            val,index, node = pq.get() </span><br><span class="line">            <span class="comment"># 不能直接操作point，会导致链表的断裂</span></span><br><span class="line">            point.next = node</span><br><span class="line">            point = point.next</span><br><span class="line">            node = node.next</span><br><span class="line">            <span class="keyword">if</span> node != <span class="keyword">None</span>:</span><br><span class="line">                pq.put((node.val,index,node))</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p><strong>O(N log k) </strong>:比较大小的时间花费将被减少到O(log k)，因为优先级队列的内部实现机制用到了堆，但是找到最小值的节点仅仅花费 O(1)， 在最终的链表中有K个节点。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;合并K个有序的链表&quot;&gt;&lt;a href=&quot;#合并K个有序的链表&quot; class=&quot;headerlink&quot; title=&quot;合并K个有序的链表&quot;&gt;&lt;/a&gt;合并K个有序的链表&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;难度： hard模式                                   思路：优先级队列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、题目描述&quot;&gt;&lt;a href=&quot;#一、题目描述&quot; class=&quot;headerlink&quot; title=&quot;一、题目描述&quot;&gt;&lt;/a&gt;一、题目描述&lt;/h3&gt;&lt;p&gt;合并 &lt;em&gt;k&lt;/em&gt; 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://izhen.tech/categories/LeetCode/"/>
    
    
      <category term="优先级队列，链表" scheme="http://izhen.tech/tags/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%EF%BC%8C%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>21题有序链表的合并</title>
    <link href="http://izhen.tech/2019/02/22/21%E9%A2%98%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://izhen.tech/2019/02/22/21题合并两个有序链表/</id>
    <published>2019-02-22T09:37:03.000Z</published>
    <updated>2019-03-01T08:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode刷题之21题有序链表的合并"><a href="#LeetCode刷题之21题有序链表的合并" class="headerlink" title="LeetCode刷题之21题有序链表的合并"></a>LeetCode刷题之21题有序链表的合并</h2><blockquote><p>难度：easy                                  思路：硬算</p></blockquote><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><p>有序链表的合并是归并排序中的经典算法，这题采用常规思路即可解决问题，唯一要注意的点是当指针p、q中任一指针为空时后续应该如何操作。</p><h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2,)</span>:</span></span><br><span class="line">p = l1 </span><br><span class="line">    q = l2</span><br><span class="line">    head = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># p q均不为空</span></span><br><span class="line">    <span class="keyword">while</span> p != <span class="keyword">None</span> <span class="keyword">and</span> q != <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">if</span>  p.val &lt;= q.val :</span><br><span class="line">            <span class="keyword">if</span> head == <span class="keyword">None</span>:</span><br><span class="line">                head = p</span><br><span class="line">                n = p</span><br><span class="line">                p = p.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n.next = p</span><br><span class="line">                n = n.next</span><br><span class="line">                p = p.next</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">if</span> head == <span class="keyword">None</span>:</span><br><span class="line">                head = q</span><br><span class="line">                n = q</span><br><span class="line">                q = q.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n.next = q</span><br><span class="line">                n = n.next</span><br><span class="line">                q = q.next</span><br><span class="line">    <span class="comment"># p q中任一为空 将p指定为非空 直接将p后面的节点连在n的后面</span></span><br><span class="line">    <span class="keyword">if</span> p == <span class="keyword">None</span> <span class="keyword">and</span> q !=<span class="keyword">None</span>:</span><br><span class="line">        p = q</span><br><span class="line">        q = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> head == <span class="keyword">None</span>:</span><br><span class="line">        head = p</span><br><span class="line">        n = p</span><br><span class="line">    <span class="keyword">else</span>:            </span><br><span class="line">        n.next = p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p>时间复杂度分析：</p><p><strong>O(M+N)       M为l1链表的长度，N为l2链表的长度</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode刷题之21题有序链表的合并&quot;&gt;&lt;a href=&quot;#LeetCode刷题之21题有序链表的合并&quot; class=&quot;headerlink&quot; title=&quot;LeetCode刷题之21题有序链表的合并&quot;&gt;&lt;/a&gt;LeetCode刷题之21题有序链表的合并&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;难度：easy                                  思路：硬算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、题目描述&quot;&gt;&lt;a href=&quot;#一、题目描述&quot; class=&quot;headerlink&quot; title=&quot;一、题目描述&quot;&gt;&lt;/a&gt;一、题目描述&lt;/h3&gt;&lt;p&gt;将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://izhen.tech/categories/LeetCode/"/>
    
    
      <category term="链表" scheme="http://izhen.tech/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题之20题有效的括号</title>
    <link href="http://izhen.tech/2019/02/22/20%E9%A2%98%E6%8B%AC%E5%8F%B7%E7%9A%84%E9%85%8D%E5%AF%B9/"/>
    <id>http://izhen.tech/2019/02/22/20题括号的配对/</id>
    <published>2019-02-22T09:23:53.000Z</published>
    <updated>2019-03-01T08:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode刷题之20题有效的括号"><a href="#LeetCode刷题之20题有效的括号" class="headerlink" title="LeetCode刷题之20题有效的括号"></a>LeetCode刷题之20题有效的括号</h2><blockquote><p>难度：简单                                   思路：栈</p></blockquote><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><a id="more"></a><p>示例：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"&#123;[]&#125;"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><p>这是一题难度为简单的题，但我仍旧很久没有思路，就是没有想到利用栈的特性，本题是一道经典的栈的特性的题目，想到栈，就成功了一大半。</p><h3 id="三、-代码分析"><a href="#三、-代码分析" class="headerlink" title="三、 代码分析"></a>三、 代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">    res = <span class="keyword">True</span></span><br><span class="line">    stack = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stack: <span class="comment"># 栈为空</span></span><br><span class="line">            stack.append(element) </span><br><span class="line">            <span class="comment"># 利用栈的先进后出的特点，判断列表的尾部即栈的头部的元素情况</span></span><br><span class="line">        <span class="keyword">elif</span> stack[<span class="number">-1</span>] == <span class="string">'('</span> <span class="keyword">and</span> element == <span class="string">')'</span>:</span><br><span class="line">            stack.pop() <span class="comment"># 出栈在栈的头部</span></span><br><span class="line">        <span class="keyword">elif</span> stack[<span class="number">-1</span>] == <span class="string">'['</span> <span class="keyword">and</span> element == <span class="string">']'</span>:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">elif</span> stack[<span class="number">-1</span>] == <span class="string">'&#123;'</span> <span class="keyword">and</span> element == <span class="string">'&#125;'</span>:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(element) <span class="comment"># 进栈也在栈的头部</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断栈是否为空，为空则说明括号是对称有效</span></span><br><span class="line">        <span class="keyword">if</span> stack :</span><br><span class="line">            res = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            res = <span class="keyword">True</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><p><strong>O(N)           N为字符串的长度</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode刷题之20题有效的括号&quot;&gt;&lt;a href=&quot;#LeetCode刷题之20题有效的括号&quot; class=&quot;headerlink&quot; title=&quot;LeetCode刷题之20题有效的括号&quot;&gt;&lt;/a&gt;LeetCode刷题之20题有效的括号&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;难度：简单                                   思路：栈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、题目描述&quot;&gt;&lt;a href=&quot;#一、题目描述&quot; class=&quot;headerlink&quot; title=&quot;一、题目描述&quot;&gt;&lt;/a&gt;一、题目描述&lt;/h3&gt;&lt;p&gt;给定一个只包括 &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt; 的字符串，判断字符串是否有效。&lt;/p&gt;
&lt;p&gt;有效字符串需满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左括号必须用相同类型的右括号闭合。&lt;/li&gt;
&lt;li&gt;左括号必须以正确的顺序闭合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意空字符串可被认为是有效字符串。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://izhen.tech/categories/LeetCode/"/>
    
    
      <category term="栈" scheme="http://izhen.tech/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://izhen.tech/2019/02/18/19%E9%A2%98%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0N%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://izhen.tech/2019/02/18/19题删除链表倒数N的节点/</id>
    <published>2019-02-18T06:45:30.000Z</published>
    <updated>2019-03-01T08:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="删除链表的指定节点"><a href="#删除链表的指定节点" class="headerlink" title="删除链表的指定节点"></a>删除链表的指定节点</h2><blockquote><p>难度：中等         思路：窗口法</p></blockquote><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>给定一个链表，删除链表的倒数第<code>n</code>个节点，并且返回链表的头结点。</p><p>示例：</p><blockquote><p>给定一个链表：1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p><p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p></blockquote><p><strong>说明</strong>：给定的n保证是有效的。</p><a id="more"></a><p><strong>进阶：</strong>你能尝试一趟扫描实现吗？</p><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><h4 id="2-1-逻辑梳理"><a href="#2-1-逻辑梳理" class="headerlink" title="2.1 逻辑梳理"></a>2.1 逻辑梳理</h4><p>本题和链表有关，链表是最基本的数据结构，链表中的元素可存储在内存的任何地方，链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。链表的优势在于插入和删除元素，可以快速完成而不需要移动其他元素。链表由一个个节点组成，节点有两部分，节点的值和下一个节点的地址，尾节点的下一个节点的地址为空。在Python中即<code>None</code>，想要通过一趟扫描删除倒数第n个节点，最有效的方法就是窗口法，指针<code>p，q</code>之间间隔n个节点，然后指针<code>p、q</code>同步往尾部移动，当<code>q</code>到达尾节点时，<code>p</code>后的节点即我们需要删除的目标节点。将p内节点的地址指向下下个节点，删除目标节点，任务完成。</p><h4 id="2-2-难点分析"><a href="#2-2-难点分析" class="headerlink" title="2.2 难点分析"></a>2.2 难点分析</h4><p>函数传进来的参数和传出去的值都是头结点，在删除节点时，有一个问题需要考虑，怎么保证下下个节点是存在的，如果恰好要删除的就是头节点，是否在程序中考虑到了？其实我刚开始也没考虑，就把示例传进去有正确结果返回高兴的屁颠屁颠以为自己做完了，但上传上去之后被特殊情况搞得晕头转向，仔细分析了很长时间才把<code>head、p、q</code>之间的关系理清楚。</p><h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> head:</span><br><span class="line">        p=head</span><br><span class="line">        q=head</span><br><span class="line">        <span class="comment"># 构建窗口，保证p、q指针之间间隔n个节点</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">0</span> <span class="keyword">and</span> q != <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment">#当循环结束，如果q=None，则说明需要删除的是头结点。</span></span><br><span class="line">            q = q.next</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> q != <span class="keyword">None</span>:<span class="comment">#需要删除的节点不是头结点，p、q正常往链表尾部滑动</span></span><br><span class="line">            <span class="keyword">while</span> q.next != <span class="keyword">None</span> : </span><br><span class="line">                p = p.next</span><br><span class="line">                q = q.next</span><br><span class="line">        <span class="keyword">if</span> q == <span class="keyword">None</span> : <span class="comment">#要删除头节点</span></span><br><span class="line">           head = p.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.next = p.next.next <span class="comment">#正常情况 删除p后面的节点</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><p>O(N)                              <em>N为链表的节点个数</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;删除链表的指定节点&quot;&gt;&lt;a href=&quot;#删除链表的指定节点&quot; class=&quot;headerlink&quot; title=&quot;删除链表的指定节点&quot;&gt;&lt;/a&gt;删除链表的指定节点&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;难度：中等         思路：窗口法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;p&gt;给定一个链表，删除链表的倒数第&lt;code&gt;n&lt;/code&gt;个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个链表：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2.&lt;/p&gt;
&lt;p&gt;当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：给定的n保证是有效的。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://izhen.tech/categories/LeetCode/"/>
    
    
      <category term="链表" scheme="http://izhen.tech/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="窗口法" scheme="http://izhen.tech/tags/%E7%AA%97%E5%8F%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://izhen.tech/2019/02/18/18%E9%A2%98%E5%9B%9B%E4%B8%AA%E6%95%B0%E7%9A%84%E5%92%8C/"/>
    <id>http://izhen.tech/2019/02/18/18题四个数的和/</id>
    <published>2019-02-18T06:41:43.000Z</published>
    <updated>2019-03-01T08:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四个数的和"><a href="#四个数的和" class="headerlink" title="四个数的和"></a>四个数的和</h2><blockquote><p>难度：中等         思路：头尾逼近法</p></blockquote><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>给定一个包含<code>n</code>个整数的数组<code>nums</code>和一个目标值<code>target</code>，判断nums中是否存在四个元素a，b，c，和d，使得<code>a+b+c+d</code>的值与target相等？找出所有满足条件且不重复的四元组。</p><p>注意：答案中不可以包含重复的四元组。</p><a id="more"></a><p>示例：</p><blockquote><p>给定数组nums=[1, 0, -1, 0, -2, 2], 和target=0。</p><p>满足要求的四元组集合为：</p><p>[[-1 ,0, 0, 1],</p><p>[-2, -1, 1, 2],</p><p>[-2 ,0, 0, 2]]</p></blockquote><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><p>在LeetCode的题目顺序有一个由浅入深的过渡，这题的解决方法完全可以参照三个数的求和问题。让我们来回顾一个三个数的求和问题，三个数的求和与四个数的求和表面上是一模一样的，无非是把三个数替换为四个数，所以在解决方式上内核机制也是相同的。</p><h4 id="2-1-排序"><a href="#2-1-排序" class="headerlink" title="2.1 排序"></a>2.1 排序</h4><p>数的求和问题，最简单粗暴的方法就是把给定的数组for循环遍历几次，找到所有符合要求的数，但是因为时间开销过大，提交的时候不被通过，所以只能找其他的渠道。第一步，将所给的数按照从小到大排序，Python有内置的排序函数，这里就直接调用了。</p><h4 id="2-2-开始遍历"><a href="#2-2-开始遍历" class="headerlink" title="2.2 开始遍历"></a>2.2 开始遍历</h4><p>在多个数求和问题中，使用的方法为两头法，具体实现方法如下。首先固定第一个数，从数组的头部开始，求出目标数target与第一个数的差值diff；然后固定第二个数，求出之前的差值diff与当前数的差值作为新目标goal；然后使用头尾法，如果头尾的和小于goal，则头往后移，如果头尾的和大于goal，则尾往前移（经过排序后，尾部的数大头部的数小），如果头尾的和正好等于goal，那么我们找到了目标数，把四个数存到结果中，同时往中间移动头尾的坐标，头尾位置下标相等时此次遍历结束；然后依次移动前两个固定的数。</p><h4 id="2-3-难点分析"><a href="#2-3-难点分析" class="headerlink" title="2.3 难点分析"></a>2.3 难点分析</h4><p>这题确定了算法，还是有很多细节需要推敲，而这些细节有些时候比算法本身更花时间。在题目描述中，它特地提出让我们注意解决重复元素的问题，解决重复问题有两个思路：一是处理返回的数组，将其中重复的元素去掉；二是从源头上解决问题，在生成结果数组时，一旦发现重复就不再添加入返回数组。这题真正的难点就在这里了，怎么样才能最有效的去除重复元素呢？这里只提供一个巧妙的思路，重复的元素从何而来，归根结底是因为数组中本身就有重复的元素，在求和的时候，当我们移动到下一个元素的时候，检测当前元素与上一个元素是否相等，这里为什么是与前一个元素作比较而不是与后一个元素作比较，这是有原因的，如果与后一个元素作比较的话，那么就会漏掉一种情况，这两个数相等但是他们的和就是我们想找的，如果与后一个元素作比较的话这个数还没有参与计算就会被跳过。结果会错误。（注意，当我们访问一个元素的时候要确保这个元素存在否则就会报错），如果相等就跳过此次循环。（<strong>需要确保每个不重复元素都被访问到</strong>）</p><h4 id="2-4-细节"><a href="#2-4-细节" class="headerlink" title="2.4 细节"></a>2.4 细节</h4><p>首先要对输入的数组进行长度判断，避免输入空数组时后续进行不存在位置的的访问导致程序崩溃；其次是重复元素的问题，在元素移动过程中，为了不产生重复的四个数组合，固定的第一个数往后移动时，需要考虑当前数与上一个数是否相等，如果相等，则使用<code>continue</code>语句跳过此次循环。固定的第一个数也存在一模一样的问题。其次是首尾移动时，当检测到首尾之和相等时，头部和尾部的位置都往中间移，这时头尾分别与后一个数作比较，如果相等的话，头尾坐标继续往中间靠。（这里检测到头尾之和与目标相等时，不存在一个数还没用到就被丢弃，所以可以与后一个数作比较）</p><h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">    res=[]</span><br><span class="line">    nums=sorted(nums) <span class="comment">#排序</span></span><br><span class="line">    length=len(nums)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length<span class="number">-3</span>):</span><br><span class="line">        diff=target-nums[i]</span><br><span class="line">        <span class="keyword">if</span> i &gt;<span class="number">0</span> <span class="keyword">and</span> nums[i<span class="number">-1</span>] == nums[i]: <span class="comment">#防止重复</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length<span class="number">-2</span>):</span><br><span class="line">            goal=diff-nums[j]</span><br><span class="line">            front=j+<span class="number">1</span></span><br><span class="line">            back=length<span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> j &gt;i+<span class="number">1</span> <span class="keyword">and</span> nums[j<span class="number">-1</span>] == nums[j]:<span class="comment">#防止重复</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">while</span> front&lt;back:</span><br><span class="line">                the_sum=nums[front]+nums[back]</span><br><span class="line">                <span class="keyword">if</span> the_sum &lt; goal:</span><br><span class="line">                    front += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> the_sum &gt; goal:</span><br><span class="line">                    back -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> the_sum == goal:                        </span><br><span class="line">                    res.append([nums[i], nums[j], nums[front],nums[back]])</span><br><span class="line">                    <span class="keyword">while</span> front &lt;back <span class="keyword">and</span> nums[front] == nums[front+<span class="number">1</span>]:<span class="comment">#防止重复</span></span><br><span class="line">                        front+=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> front &lt; back <span class="keyword">and</span> nums[back]==nums[back<span class="number">-1</span>]:<span class="comment">#防止重复</span></span><br><span class="line">                        back -=<span class="number">1</span></span><br><span class="line">                    front += <span class="number">1</span></span><br><span class="line">                    back -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><p>耗时还是非常多的，排序+O(N^3^)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;四个数的和&quot;&gt;&lt;a href=&quot;#四个数的和&quot; class=&quot;headerlink&quot; title=&quot;四个数的和&quot;&gt;&lt;/a&gt;四个数的和&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;难度：中等         思路：头尾逼近法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h3&gt;&lt;p&gt;给定一个包含&lt;code&gt;n&lt;/code&gt;个整数的数组&lt;code&gt;nums&lt;/code&gt;和一个目标值&lt;code&gt;target&lt;/code&gt;，判断nums中是否存在四个元素a，b，c，和d，使得&lt;code&gt;a+b+c+d&lt;/code&gt;的值与target相等？找出所有满足条件且不重复的四元组。&lt;/p&gt;
&lt;p&gt;注意：答案中不可以包含重复的四元组。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://izhen.tech/categories/LeetCode/"/>
    
    
      <category term="求和" scheme="http://izhen.tech/tags/%E6%B1%82%E5%92%8C/"/>
    
      <category term="数组" scheme="http://izhen.tech/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>17题电话号码的字母组合</title>
    <link href="http://izhen.tech/2019/02/18/17%E9%A2%98%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>http://izhen.tech/2019/02/18/17题电话号码的字母组合/</id>
    <published>2019-02-18T03:51:43.000Z</published>
    <updated>2019-03-01T08:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电话号码的字母组合"><a href="#电话号码的字母组合" class="headerlink" title="电话号码的字母组合"></a>电话号码的字母组合</h2><blockquote><p>难度：中等         思路：递归</p></blockquote><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>给定一个仅包含数字<code>2-9</code>的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意<code>1</code>不对应任何字母。</p><a id="more"></a><p><img src="/2019/02/18/17题电话号码的字母组合/1550226768193.png" alt="1550226768193"></p><p>示例：</p><p>输入：“23”</p><p>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”]</p><h3 id="二、解题过程"><a href="#二、解题过程" class="headerlink" title="二、解题过程"></a>二、解题过程</h3><p>拿到这个题目，分析我们要解决的问题，题目给出了数字到字母的映射，故首先要把映射关系一一对应出来，在Python中很容易想到字典，把映射关系先存起来，唯一值得推敲的是这里的值的类型是存成字符串<code>&quot;abc&quot;</code>还是数组<code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code>呢？看到电话按键我们很容易想到字符串，但研究我们最终的输出结果类型，存为数组类型更方便后边的计算，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_map = &#123;<span class="string">'2'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], <span class="string">'3'</span>:[<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>], </span><br><span class="line">            <span class="string">'4'</span>:[<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>], <span class="string">'5'</span>:[<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>], </span><br><span class="line">            <span class="string">'6'</span>:[<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>], <span class="string">'7'</span>:[<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>],</span><br><span class="line">            <span class="string">'8'</span>:[<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>], <span class="string">'9'</span>:[<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>]&#125;</span><br></pre></td></tr></table></figure><p>第二步来到了怎么解决这个题目，这个题目看起来很简单，实际上也很简单但就需要那么灵光一现，首先把它的结构图画出来，本质上是一个全组合问题，通过for循环遍历给出的数字所对应的字母，然后内部嵌套for循环遍历下一个数字对应的字母，就这样层层嵌套，唯一的难点是我们无法提前预知需要嵌套多少层for循环。</p><p>灵光乍现了，递归函数能够很好的解决这种循环问题。通过认真分析，发现这题用递归是最棒的方法。首先来复习一下递归：</p><p>递归将问题分解为越来越小的子问题，直到问题的规模小到可以被直接解决。<strong>每个递归函数都有两个部分：基线条件和递归条件 </strong>。递归条件指的是函数调用自己，而基线条件是指函数不再调用自己，从而避免无限循环。</p><p>如果你还对递归算法有疑问的话，试着写一个关于某个数阶乘的递归算法，<code>fact(n) return n*(n-1)*(n-2)...</code>规定<code>0！=1</code>，最合适的基线条件什么呢？</p><p>分析此题，基线条件可以是待访问的数字个数为1时，返回这个键的映射值；递归条件为访问当前访问数字的第一个数字，然后for循环遍历这个数字对应的字母，在for循环内部，将数字的第一位去掉然后调用函数本身。然后for循环遍历返回值。</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        dict_map = &#123;<span class="string">'2'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], <span class="string">'3'</span>:[<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>], </span><br><span class="line">                    <span class="string">'4'</span>:[<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>], <span class="string">'5'</span>:[<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>], </span><br><span class="line">                    <span class="string">'6'</span>:[<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>], <span class="string">'7'</span>:[<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>],</span><br><span class="line">                    <span class="string">'8'</span>:[<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>], <span class="string">'9'</span>:[<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>]&#125;</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> len(digits) :           </span><br><span class="line">            <span class="keyword">if</span> len(digits) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> dict_map[digits[<span class="number">0</span>]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                first = dict_map[digits[<span class="number">0</span>]]</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> first:</span><br><span class="line">                    second = self.letterCombinations(digits[<span class="number">1</span>:])</span><br><span class="line">                    <span class="keyword">for</span> y <span class="keyword">in</span> second:</span><br><span class="line">                        t = x + y</span><br><span class="line">                        res.append(t)</span><br><span class="line">                <span class="keyword">return</span> res </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;电话号码的字母组合&quot;&gt;&lt;a href=&quot;#电话号码的字母组合&quot; class=&quot;headerlink&quot; title=&quot;电话号码的字母组合&quot;&gt;&lt;/a&gt;电话号码的字母组合&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;难度：中等         思路：递归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、题目描述&quot;&gt;&lt;a href=&quot;#一、题目描述&quot; class=&quot;headerlink&quot; title=&quot;一、题目描述&quot;&gt;&lt;/a&gt;一、题目描述&lt;/h3&gt;&lt;p&gt;给定一个仅包含数字&lt;code&gt;2-9&lt;/code&gt;的字符串，返回所有它能表示的字母组合。&lt;/p&gt;
&lt;p&gt;给出数字到字母的映射如下（与电话按键相同）。注意&lt;code&gt;1&lt;/code&gt;不对应任何字母。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://izhen.tech/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://izhen.tech/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://izhen.tech/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>树莓派控制红外遥控</title>
    <link href="http://izhen.tech/2019/01/23/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8E%A7%E5%88%B6%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7/"/>
    <id>http://izhen.tech/2019/01/23/树莓派控制红外遥控/</id>
    <published>2019-01-23T08:49:56.000Z</published>
    <updated>2019-01-23T08:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树莓派控制红外遥控"><a href="#树莓派控制红外遥控" class="headerlink" title="树莓派控制红外遥控"></a>树莓派控制红外遥控</h3><blockquote><p><strong>写在前面</strong>：因项目需要，故在网上淘了一个红外遥控模块，在树莓派上学习一下红外遥控。</p></blockquote><h3 id="一、红外遥控及接线"><a href="#一、红外遥控及接线" class="headerlink" title="一、红外遥控及接线"></a>一、红外遥控及接线</h3><p>​    38K通用红外遥控器，采用NEC编码格式，传输距离大于八米，比较适合日常开发，使用方便。</p><p>​    红外接收模块引脚说明：S为OUT引脚，中间为VCC，-为GND。根据模块上的标识来接。</p><p>​    插到树莓派上，S接树莓派的12引脚（物理引脚编码），其BCM编码为18；VCC接3.3V；GND接树莓派任意GND引脚即可。模块实拍如下图所示：<br><a id="more"></a><br><img src="/2019/01/23/树莓派控制红外遥控/1548142845457.png" alt="1548142845457"></p><h3 id="二、软件配置"><a href="#二、软件配置" class="headerlink" title="二、软件配置"></a>二、软件配置</h3><h4 id="2-1-安装lirc，修改配置文件"><a href="#2-1-安装lirc，修改配置文件" class="headerlink" title="2.1 安装lirc，修改配置文件"></a>2.1 安装lirc，修改配置文件</h4><p>​    LIRC（Linux Infrared remote control）是一个Linux系统下开源的软件包，用来从远程通用红外设备上接收和发送红外信号。可以解码和发送红外信号。</p><p>​    通过SSH连接树莓派，安装lirc：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lirc</span><br></pre></td></tr></table></figure><p>​    因为lirc版本更新的原因，不同的版本修改的配置文件不同，输入<code>lircd -v</code>查看lirc的版本，我是0.9.4.c，修改<code>/etc/lirc/lirc_options.conf</code>文件，用<code>vi</code>进入修改：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[lircd]</span></span><br><span class="line"><span class="comment"># driver = devinput</span></span><br><span class="line"><span class="attr">driver</span>   = default</span><br></pre></td></tr></table></figure><h4 id="2-2-修改-boot-config-txt"><a href="#2-2-修改-boot-config-txt" class="headerlink" title="2.2 修改/boot/config.txt"></a>2.2 修改<code>/boot/config.txt</code></h4><p>​    用<code>vi</code>进入文件内部，找到<code>dtoverlay</code>并修改如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dtoverlay</span>=lirc-rpi,gpio_in_pin = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>​    这里18对应树莓派BCM编码的gpio接口。</p><h4 id="2-3-重新开启lirc"><a href="#2-3-重新开启lirc" class="headerlink" title="2.3 重新开启lirc"></a>2.3 重新开启lirc</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/lircd restart</span><br><span class="line">sudo modprobe lirc_rpi</span><br></pre></td></tr></table></figure><p>至此，<code>lirc</code>软件配置完成</p><h3 id="三、测试红外接收"><a href="#三、测试红外接收" class="headerlink" title="三、测试红外接收"></a>三、测试红外接收</h3><h4 id="3-1关闭红外接收功能"><a href="#3-1关闭红外接收功能" class="headerlink" title="3.1关闭红外接收功能"></a>3.1关闭红外接收功能</h4><p>命令行输入以下命令，关闭<code>lirc</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span> $(pidof lircd)</span><br></pre></td></tr></table></figure><h4 id="3-4-测试红外接收"><a href="#3-4-测试红外接收" class="headerlink" title="3.4 测试红外接收"></a>3.4 测试红外接收</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode2 -d/dev/lirc0</span><br></pre></td></tr></table></figure><p>用红外遥控器，对着接收器按下任意按键，屏幕会打印类似下面的内容，说明红外接收功能正常。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">space 562</span><br><span class="line">pulse 579</span><br><span class="line">space 1672</span><br><span class="line">pulse 577</span><br></pre></td></tr></table></figure><p>在这里我卡壳了，接收不到任何内容，反复检查了前面的步骤，确定无误后继续谷歌，找到了这篇博客<a href="http://www.eeboard.com/bbs/thread-6940-1-1.html" target="_blank" rel="noopener">^1</a>，之前输出随意找了一个IO口，但是都没有用，把OUT连接到GPIO pin12上，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dmesg | grep -i lirc</span><br></pre></td></tr></table></figure><p>发现有内容了，怀疑是红外遥控的输出引脚有指定。</p><h4 id="3-5-红外编码录制"><a href="#3-5-红外编码录制" class="headerlink" title="3.5 红外编码录制"></a>3.5 红外编码录制</h4><p>首先查看有哪些按键名并记录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo irrecord --list-namaspace</span><br></pre></td></tr></table></figure><p>我用的几个键名是：</p><table><thead><tr><th>按键</th><th>按键名</th></tr></thead><tbody><tr><td>1</td><td>KEY_1</td></tr><tr><td>2</td><td>KEY_2</td></tr><tr><td>3</td><td>KEY_3</td></tr><tr><td>4</td><td>KEY_4</td></tr><tr><td>5</td><td>KEY_5</td></tr><tr><td>6</td><td>KEY_6</td></tr><tr><td>7</td><td>KEY_7</td></tr><tr><td>8</td><td>KEY_8</td></tr><tr><td>9</td><td>KEY_9</td></tr><tr><td>0</td><td>KEY_0</td></tr><tr><td>*</td><td>KEY_STAR</td></tr><tr><td>#</td><td>KEY_PUND</td></tr><tr><td>↑</td><td>KEY_UP</td></tr><tr><td>↓</td><td>KEY_DOWN</td></tr><tr><td>←</td><td>KEY_LEFT</td></tr><tr><td>→</td><td>KEY_RIGHT</td></tr><tr><td>OK</td><td>KEY_OK</td></tr></tbody></table><p>执行红外线编码录制命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo irrecord -d /dev/lirc0 ~/lircd.conf</span><br></pre></td></tr></table></figure><p>刚开始需要输入文件名称，最终会根据此名称保存对应的文件名，我的文件名为<code>pi-key</code>，然后会有一堆英文提示出来，继续回车，会让你按按键，每个按键保证屏幕上输出一个<code>.</code>,一直按保证所有的按键都被按到，全部按过一遍之后就不停的按最后按的那个按键</p><p><img src="/2019/01/23/树莓派控制红外遥控/1548230657351.png" alt="1548230657351">然后就会弹出第二轮按键录入，这时也是不停按，要有耐心，循环按，使劲按，直到弹出需要你输入下一个按键的名字为止。如下：</p><p><img src="/2019/01/23/树莓派控制红外遥控/1548230697554.png" alt="1548230697554"></p><p>这时依次录入按键名字，然后按下对应的按键，输入按键名字不能输删除，如果输错了也不要紧，按回车重新输入即可。将所有的按键都录入，这一步就结束了。成功之后会在~/目录下生成<code>pi.lircd.conf</code>这个文件，把这个文件放到<code>/etc/lirc/lircd/lircd.conf.d/</code>这个目录里即可，命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp ~/pi.lircd.conf /etc/lirc/lircd.conf.d/</span><br></pre></td></tr></table></figure><p>完成后重启树莓派。</p><h3 id="四、运行Python代码"><a href="#四、运行Python代码" class="headerlink" title="四、运行Python代码"></a>四、运行Python代码</h3><p>运行编写的Python代码，终端会显示按键的键值。</p><p>Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Constants <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">PIN = <span class="number">18</span></span><br><span class="line">delay_time = <span class="number">0.00006</span></span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setup(PIN, GPIO.IN, GPIO.PUD_UP)</span><br><span class="line">print(<span class="string">"irm test start..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span><span class="params">(key_val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(key_val==Keys.KEY_1):  </span><br><span class="line">        print(<span class="string">"Button KEY_1"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_2):  </span><br><span class="line">        print(<span class="string">"Button KEY_2"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_3):  </span><br><span class="line">        print(<span class="string">"Button KEY_3"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_4):  </span><br><span class="line">        print(<span class="string">"Button KEY_4"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_5):  </span><br><span class="line">        print(<span class="string">"Button KEY_5"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_6):  </span><br><span class="line">        print(<span class="string">"Button KEY_6"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_7):  </span><br><span class="line">        print(<span class="string">"Button KEY_7"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_8):  </span><br><span class="line">        print(<span class="string">"Button KEY_8"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_9):  </span><br><span class="line">        print(<span class="string">"Button KEY_9"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_0):  </span><br><span class="line">        print(<span class="string">"Button 0"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_STAR):  </span><br><span class="line">        print(<span class="string">"Button KEY_STAR"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_POUND):  </span><br><span class="line">        print(<span class="string">"Button KEY_POUND"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_UP):  </span><br><span class="line">        print(<span class="string">"Button KEY_UP"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_LEFT):  </span><br><span class="line">        print(<span class="string">"Button KEY_LEFT"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_OK):  </span><br><span class="line">        print(<span class="string">"Button KEY_OK"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_RIGHT):  </span><br><span class="line">        print(<span class="string">"Button KEY_RIGHT"</span>)  </span><br><span class="line">    <span class="keyword">elif</span>(key_val==Keys.KEY_DOWN):  </span><br><span class="line">        print(<span class="string">"Button KEY_DOWN"</span>)  </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> GPIO.input(PIN) == <span class="number">0</span>:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> GPIO.input(PIN) ==<span class="number">0</span> <span class="keyword">and</span> count &lt;<span class="number">200</span>:</span><br><span class="line">                count +=<span class="number">1</span></span><br><span class="line">                time.sleep(delay_time)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">while</span> GPIO.input(PIN) == <span class="number">1</span> <span class="keyword">and</span> count &lt; <span class="number">80</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                time.sleep(delay_time)</span><br><span class="line">            </span><br><span class="line">            idx = <span class="number">0</span></span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            data = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">32</span>):</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> GPIO.input(PIN) ==<span class="number">1</span> <span class="keyword">and</span> count &lt; <span class="number">15</span>:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    time.sleeep(delay_time)</span><br><span class="line">                </span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> GPIO.input(PIN) == <span class="number">1</span> <span class="keyword">and</span> count &lt; <span class="number">40</span>:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    time.sleep(delay_time)</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">if</span> count &gt; <span class="number">8</span>:</span><br><span class="line">                    data[idx] |= <span class="number">1</span>&lt;&lt;cnt</span><br><span class="line">                <span class="keyword">if</span> cnt == <span class="number">7</span>:</span><br><span class="line">                    cnt = <span class="number">0</span>;</span><br><span class="line">                    idx +=<span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> data[<span class="number">0</span>]+data[<span class="number">1</span>] == <span class="number">0xFF</span> <span class="keyword">and</span> data[<span class="number">2</span>]+data[<span class="number">3</span>] == <span class="number">0xFF</span> :</span><br><span class="line">                print(<span class="string">"Get the key: 0x%02x"</span>%data[<span class="number">2</span>])</span><br><span class="line">                exec_cmd(data[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    GPIO.cleanup();</span><br></pre></td></tr></table></figure><p>按下遥控按键，终端会显示接收到的按键的键值：</p><p><img src="/2019/01/23/树莓派控制红外遥控/1548232503540.png" alt="1548232503540"></p><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><p>1、网址：<a href="https://iaiai.iteye.com/blog/2411532" target="_blank" rel="noopener">https://iaiai.iteye.com/blog/2411532</a></p><p>2、产品说明书：<strong><a href="https://pan.baidu.com/s/1E3tnY1Kzo_Sdkju7QzQylQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1E3tnY1Kzo_Sdkju7QzQylQ</a></strong> </p><p>3、网址：<a href="http://www.eeboard.com/bbs/thread-6940-1-1.html" target="_blank" rel="noopener">http://www.eeboard.com/bbs/thread-6940-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;树莓派控制红外遥控&quot;&gt;&lt;a href=&quot;#树莓派控制红外遥控&quot; class=&quot;headerlink&quot; title=&quot;树莓派控制红外遥控&quot;&gt;&lt;/a&gt;树莓派控制红外遥控&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;：因项目需要，故在网上淘了一个红外遥控模块，在树莓派上学习一下红外遥控。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、红外遥控及接线&quot;&gt;&lt;a href=&quot;#一、红外遥控及接线&quot; class=&quot;headerlink&quot; title=&quot;一、红外遥控及接线&quot;&gt;&lt;/a&gt;一、红外遥控及接线&lt;/h3&gt;&lt;p&gt;​    38K通用红外遥控器，采用NEC编码格式，传输距离大于八米，比较适合日常开发，使用方便。&lt;/p&gt;
&lt;p&gt;​    红外接收模块引脚说明：S为OUT引脚，中间为VCC，-为GND。根据模块上的标识来接。&lt;/p&gt;
&lt;p&gt;​    插到树莓派上，S接树莓派的12引脚（物理引脚编码），其BCM编码为18；VCC接3.3V；GND接树莓派任意GND引脚即可。模块实拍如下图所示：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://izhen.tech/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://izhen.tech/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="红外遥控" scheme="http://izhen.tech/tags/%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之NexT博客美化</title>
    <link href="http://izhen.tech/2019/01/20/Hexo%E4%B9%8BNexT%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    <id>http://izhen.tech/2019/01/20/Hexo之NexT博客美化/</id>
    <published>2019-01-20T07:29:46.000Z</published>
    <updated>2019-01-20T07:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo之NexT博客美化"><a href="#Hexo之NexT博客美化" class="headerlink" title="Hexo之NexT博客美化"></a>Hexo之NexT博客美化</h2><blockquote><p><strong>写在前面</strong>：默认的hexo界面看起来还是太简陋了，可以给Hexo换一个主题，这里推荐NexT，这是一个比较成熟的主题，使用的人也是最多的，优化，配置扩展都集成了，使用起来比较简单。然后再对功能界面做一些扩展，博客重质量，界面做的干净、清爽就行。本文详细介绍了博客美化的步骤。<br><a id="more"></a></p></blockquote><h3 id="一、安装NexT主题"><a href="#一、安装NexT主题" class="headerlink" title="一、安装NexT主题"></a>一、安装NexT主题</h3><p>在命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载主题。打开根目录下的<code>_config.yml</code>为博客的站点配置文件，主题配置文件在<code>./themes/_config.yml</code>。本文的整个配置基本是在修改这两个配置文件，所以你需要区分清楚。在站点配置文件<code>./config.yml</code>查找<code>theme</code>并修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>这样就启用了主题next，可以输入<code>hexo s</code>查看效果。注意，有时候通过<code>hexo s</code>预览时，你会发现自己所做的修改并没有生效，这时不要着急，命令行输入<code>hexo clean</code>清理下<code>database</code>文件夹和<code>public</code>文件夹即可。</p><h3 id="二、博客设置"><a href="#二、博客设置" class="headerlink" title="二、博客设置"></a>二、博客设置</h3><p>需要先对博客基本信息做一些设置，<strong>注意，设置时冒号后面都要有一个空格，这是yml语法格式</strong>。否则会报错或修改不生效。</p><h4 id="2-1、设置语言"><a href="#2-1、设置语言" class="headerlink" title="2.1、设置语言"></a>2.1、设置语言</h4><p>在站点配置文件<code>./_config.yml</code>中，将language设置成所需要的语言。例如简体中文，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h4 id="2-2、基本信息配置"><a href="#2-2、基本信息配置" class="headerlink" title="2.2、基本信息配置"></a>2.2、基本信息配置</h4><p>在站点配置文件<code>./_config.yml</code>的开头，填上自己博客的相应信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#子主页标题 </span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#作者zhen</span></span><br></pre></td></tr></table></figure><h4 id="2-3、设置主题的Scheme"><a href="#2-3、设置主题的Scheme" class="headerlink" title="2.3、设置主题的Scheme"></a>2.3、设置主题的Scheme</h4><p>Next自带了几种外观，在主题配置文件<code>./themes/next/_config.yml</code>里找到<code>schemes</code>，可以自行选择布局，根据个人喜好，把前面的注释符#去掉即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><h4 id="2-4、菜单栏设置"><a href="#2-4、菜单栏设置" class="headerlink" title="2.4、菜单栏设置"></a>2.4、菜单栏设置</h4><p>在网站首页有归档等菜单，在主题配置文件<code>./themes/next/_config.yml</code>里找到<code>menu</code>，把需要的菜单取消注释。另外也可以自己添加菜单栏，<code>||</code>后面是<code>font awesome</code>图标栏，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span> </span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><h4 id="2-5、创建页面"><a href="#2-5、创建页面" class="headerlink" title="2.5、创建页面"></a>2.5、创建页面</h4><p>设置完菜单但是没有相关页面的话点击进去就会显示错误。在命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>然后在<code>./source/_posts</code>文件夹下面会生成对应的文件夹，打开将页面的type设置为相应的内容。例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 这里是所有分类的汇总</span><br><span class="line">categories: 分类名 </span><br><span class="line">type: "categories"</span><br><span class="line">date: 2019-01-17 15:29:31</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="2-6、文章显示设置"><a href="#2-6、文章显示设置" class="headerlink" title="2.6、文章显示设置"></a>2.6、文章显示设置</h4><p>默认首页的文章会显示全文，在发表文章的内容中加上<code>&lt;!--more--&gt;</code></p><p>这样首页中文章会显示到你插入这句话的前面，点击阅读全文才会显示整篇文章。</p><h4 id="2-7、使用RSS"><a href="#2-7、使用RSS" class="headerlink" title="2.7、使用RSS"></a>2.7、使用RSS</h4><p>在命令行中输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>安装插件，然后在主题配置文件<code>./themes/next/_config.yml</code>中找到<code>rss</code>并修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><h4 id="2-8、设置博客favicon图标"><a href="#2-8、设置博客favicon图标" class="headerlink" title="2.8、设置博客favicon图标"></a>2.8、设置博客favicon图标</h4><p>在<code>./themes/next/source/images</code>目录下放置图标，和默认的图标类似，然后在主题配置文件<code>./themes/next/_config.yml</code>找到<code>favicon</code>并修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/favicon-16x16-next.ico</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/favicon-32x32-next.ico</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><h4 id="2-9、侧边栏社交链接"><a href="#2-9、侧边栏社交链接" class="headerlink" title="2.9、侧边栏社交链接"></a>2.9、侧边栏社交链接</h4><p>在主题配置文件<code>./themes/next/_config.yml</code>找到<code>social</code>把需要的内容取消注释，填好你的链接就可以。<code>||</code>后面的是图标名称，和菜单一样，也是使用的Font Awesome`图标。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/zhengirl</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br></pre></td></tr></table></figure><h4 id="2-10、设置背景动画"><a href="#2-10、设置背景动画" class="headerlink" title="2.10、设置背景动画"></a>2.10、设置背景动画</h4><p>在主题配置文件中，找到canvas_nest，改为<code>true</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">'0,0,255'</span> <span class="comment"># RGB values, use ',' to separate</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure><h4 id="2-11、修改文章底部的-号标签"><a href="#2-11、修改文章底部的-号标签" class="headerlink" title="2.11、修改文章底部的#号标签"></a>2.11、修改文章底部的#号标签</h4><p>打开<code>./themes/next/layout/_macro/post.swig</code>文件中，搜索<code>rel=&quot;tag&quot;&gt;#</code>,将<code>#</code>替换为<code>Font Awesome</code>图标：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rel=<span class="string">"tag"</span>&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure><h4 id="2-12、搜索服务"><a href="#2-12、搜索服务" class="headerlink" title="2.12、搜索服务"></a>2.12、搜索服务</h4><p>在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>安装<code>hexo-generator-searchdb</code>插件，然后在站点配置文件<code>./_config.yml</code>添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>然后在主题配置文件<code>./themes/next/_config.yml</code>中找到<code>local_search</code>改为<code>true</code>即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-13、代码高亮"><a href="#2-13、代码高亮" class="headerlink" title="2.13、代码高亮"></a>2.13、代码高亮</h4><p>在站点配置文件<code>./_config.yml</code>内找到<code>highlight</code>，并设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#代码自动高亮</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure><p>然后在主题配置文件<code>./themes/next/_config.yml</code>中找到<code>highlight_theme</code>，设置成你喜欢的代码高亮主题：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span></span><br></pre></td></tr></table></figure><h4 id="2-14、头像圆形和旋转"><a href="#2-14、头像圆形和旋转" class="headerlink" title="2.14、头像圆形和旋转"></a>2.14、头像圆形和旋转</h4><p>将头像显示成圆形，鼠标放上去有旋转效果，在<code>.\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>文件将里面的内容替换为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6be93</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">    <span class="attribute">-transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: $site-author-name-margin;</span><br><span class="line">  <span class="attribute">text-align</span>: $site-author-name-align;</span><br><span class="line">  <span class="attribute">color</span>: $site-author-name-color;</span><br><span class="line">  <span class="attribute">font-weight</span>: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-description</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: $site-description-margin-top;</span><br><span class="line">  <span class="attribute">text-align</span>: $site-description-align;</span><br><span class="line">  <span class="attribute">font-size</span>: $site-description-font-size;</span><br><span class="line">  <span class="attribute">color</span>: $site-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-15、添加文章字数和阅读时长统计功能"><a href="#2-15、添加文章字数和阅读时长统计功能" class="headerlink" title="2.15、添加文章字数和阅读时长统计功能"></a>2.15、添加文章字数和阅读时长统计功能</h4><p>首先需要在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>安装统计插件，然后在站点配置文件<code>./_config.yml</code>末尾添加如下使能统计功能的代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reading time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-16、保留文章本身的编号"><a href="#2-16、保留文章本身的编号" class="headerlink" title="2.16、保留文章本身的编号"></a>2.16、保留文章本身的编号</h4><p>我们在写博客的时候，会自己给文章编号，但next主题默认的也有编号，这样多个编号就比较奇怪，所以把默认的编号取消，在主题配置文件查找<code>toc</code>，修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line"><span class="attr">  number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="2-17、自定义博客"><a href="#2-17、自定义博客" class="headerlink" title="2.17、自定义博客"></a>2.17、自定义博客</h4><p>Next中留出给使用者自我设计的空间，在<code>/themes/next/source/css/_custom/cutom.styl</code>文件中可以自行添加一些小样式让博客有所不同：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//文章阴影与边缘强化</span></span><br><span class="line"><span class="string">.post</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    margin-top:</span> <span class="number">0</span><span class="string">px;</span></span><br><span class="line"><span class="attr">    margin-bottom:</span> <span class="number">0</span><span class="string">px;</span></span><br><span class="line"><span class="attr">    border-radius:</span> <span class="number">16</span><span class="string">px;</span></span><br><span class="line"><span class="attr">    padding:</span> <span class="number">25</span><span class="string">px;</span></span><br><span class="line"><span class="attr">    -webkit-box-shadow:</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span><span class="string">px</span> <span class="string">rgba(0,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0.70</span><span class="string">);</span></span><br><span class="line"><span class="attr">    -moz-box-shadow:</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span><span class="string">px</span> <span class="string">rgba(0,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0.70</span><span class="string">);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三、在文章中显示图片"><a href="#三、在文章中显示图片" class="headerlink" title="三、在文章中显示图片"></a>三、在文章中显示图片</h3><p>首先在站点配置文件中将<code>post_asset_folder</code>后面修改为true，在建立一篇新的博客时，Hexo会自动建立一个与文章同名的文件夹，这样一来，就可以把图片存储在这个文件夹中方便调用。</p><p>其次本人习惯于在<code>typora</code>中将markdown文件编辑好之后直接复制到hexo中，所以需要对typora的设置做一些更改，打开偏好设置，选择将图片复制到指定文件夹中，这样在typora中也有指定的与文章同名的文件夹，所以将文章和文件夹都复制到Hexo中即可。</p><p><img src="/2019/01/20/Hexo之NexT博客美化/1547956225987.png" alt="1547956225987"></p><p>在命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装插件，等待一段时间。输入<code>hexo s</code>在本地预览网站图片就可以显示啦！</p><h3 id="四、致谢"><a href="#四、致谢" class="headerlink" title="四、致谢"></a>四、致谢</h3><p>在搭建博客的过程中，遇到了一些问题，参考了很多大佬的解决方案，感谢他们的分享。本文只是将自己搭建博客的过程复述了一遍，希望对后来者有所帮助。</p><p>推荐在配置的时看官方文档：<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/third-party-services.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo之NexT博客美化&quot;&gt;&lt;a href=&quot;#Hexo之NexT博客美化&quot; class=&quot;headerlink&quot; title=&quot;Hexo之NexT博客美化&quot;&gt;&lt;/a&gt;Hexo之NexT博客美化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;：默认的hexo界面看起来还是太简陋了，可以给Hexo换一个主题，这里推荐NexT，这是一个比较成熟的主题，使用的人也是最多的，优化，配置扩展都集成了，使用起来比较简单。然后再对功能界面做一些扩展，博客重质量，界面做的干净、清爽就行。本文详细介绍了博客美化的步骤。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://izhen.tech/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://izhen.tech/tags/hexo/"/>
    
      <category term="next" scheme="http://izhen.tech/tags/next/"/>
    
      <category term="美化设置" scheme="http://izhen.tech/tags/%E7%BE%8E%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <link href="http://izhen.tech/2019/01/20/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%85%A5%E9%97%A8/"/>
    <id>http://izhen.tech/2019/01/20/Hexo+GitHub搭建个人博客入门/</id>
    <published>2019-01-20T07:29:46.000Z</published>
    <updated>2019-01-20T07:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-GitHub搭建个人博客"><a href="#Hexo-GitHub搭建个人博客" class="headerlink" title="Hexo+GitHub搭建个人博客"></a>Hexo+GitHub搭建个人博客</h2><p><em>author：刘真真</em> </p><blockquote><p><strong>写在前面：</strong>去年三月份时候阿里云做活动就申请了一个域名，但是一直觉得搭建网站是一个比较麻烦的时候，就搁置了很久，在男朋友的鼓励下，遂决定好好捯饬一下自己的网站拿来写博客，开始一直担心自己做不出比较好的效果，后面渐渐将这种想法搁置，网上有非常多hexo的爱好者将自己的过程分享出来，基本上踩得坑都是前人遇到的，前人栽树后人乘凉，我也将搭建博客中一些关键性的步骤总结一下，以防后人跳坑。本人没有接触过前端知识，全凭谷歌和百度，所以有搭建个人网站想法的同学尽管去做，开始了第一步，后面的就不是问题了。<br><a id="more"></a></p></blockquote><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><h4 id="1-1、安装Node-js"><a href="#1-1、安装Node-js" class="headerlink" title="1.1、安装Node.js"></a>1.1、安装Node.js</h4><p>在<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>下载对应平台的安装程序。在Windows上安装时需选择全部组建，勾选<code>Add to Path</code>,打开命令行安装成功可以看到</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547781768648.png" alt="1547781768648"></p><h4 id="1-2、安装git"><a href="#1-2、安装git" class="headerlink" title="1.2、安装git"></a>1.2、安装git</h4><p>在<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>上下载Windows的安装程序。安装完成后，在开始菜单里找到”Git bsah Here”,弹出一个类似命令行的窗口，说明Git安装成功！</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547782582802.png" alt="1547782582802"></p><p>同时配置电脑的环境变量，或者在安装的时候选择<code>use Git from the Windows Command Prompt</code>,即可在命令行中调用git。</p><h4 id="1-3、Github账户注册和新建项目"><a href="#1-3、Github账户注册和新建项目" class="headerlink" title="1.3、Github账户注册和新建项目"></a>1.3、Github账户注册和新建项目</h4><p>项目必须要遵守格式：<code>账户名.github.io</code>，以免后面产生不必要的麻烦。</p><h4 id="1-4、安装hexo"><a href="#1-4、安装hexo" class="headerlink" title="1.4、安装hexo"></a>1.4、安装hexo</h4><p>在电脑的任何位置建一个文件夹，我在E盘建了一个与工程同名的<code>zhengirl.github.io</code>文件夹，然后通过命令行进入该文件夹：</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547869060632.png" alt="1547869060632"></p><p>输入<code>npm install hexo -g</code>,开始安装hexo，输入<code>hexo -v</code>,检查hexo是否安装成功。</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547869698085.png" alt="1547869698085"></p><p>输入<code>hexo init</code>,初始化文件夹。经过漫长的等待，可以看到<code>Start blogging with Hexo！</code>。</p><p>输入<code>npm install</code>，安装所需要的组件。</p><h3 id="二、本地网页的搭建"><a href="#二、本地网页的搭建" class="headerlink" title="二、本地网页的搭建"></a>二、本地网页的搭建</h3><h4 id="2-1、体验hexo"><a href="#2-1、体验hexo" class="headerlink" title="2.1、体验hexo"></a>2.1、体验hexo</h4><p>在安装好前面需要的一系列包后，输入<code>hexo g</code>，首次体验Hexo。</p><p>输入<code>hexo s</code>，开启服务器，访问该网址，正式体验Hexo。</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547873673151.png" alt="1547873673151"></p><h4 id="2-2、将Hexo与github-page联系起来"><a href="#2-2、将Hexo与github-page联系起来" class="headerlink" title="2.2、将Hexo与github page联系起来"></a>2.2、将Hexo与github page联系起来</h4><p>首先需要设置Git的user name和email（如果是第一次使用的话）。打开命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --golbal user.name. &quot;author&quot; #将用户名设为author</span><br><span class="line">$ git config --global user.email &quot;author@corpmail.com&quot; #将用户邮箱设为author@corpmail.com</span><br></pre></td></tr></table></figure><p>添加SSH，详情见这篇<a href="https://www.cnblogs.com/chuyanfenfei/p/8035067.html" target="_blank" rel="noopener">博客</a>,输入<code>ssh -T gi@github.com</code>,测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了。</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547881601583.png" alt="1547881601583"></p><h4 id="2-3、配置Deployment"><a href="#2-3、配置Deployment" class="headerlink" title="2.3、配置Deployment"></a>2.3、配置Deployment</h4><p>用VScode打开<code>zhengirl.git.com.io</code>,即整个工程，找到站点配置文件<code>_config.yml</code>，查找repo并修改，在文件末尾：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:zhengirl/zhengirl.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="2-4、新建博客"><a href="#2-4、新建博客" class="headerlink" title="2.4、新建博客"></a>2.4、新建博客</h4><p>在命令行执行命令：<code>hexo new post “博客名”</code></p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547882994463.png" alt="1547882994463"></p><p>此时在/source/_posts下可以看到已经创建的文件</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547883236915.png" alt="1547883236915"></p><p>但这里则多生成了一个博客名的文件夹，至于为什么会生成这个文件夹以及它的用途，我们在下篇文章详解。</p><h4 id="2-5、部署文章"><a href="#2-5、部署文章" class="headerlink" title="2.5、部署文章"></a>2.5、部署文章</h4><p>在生成以及部署文章之前需要安装一个扩展，<code>npm install hexo-develoyer-git --save</code>，编辑好文章后输入<code>hexo d -g</code>，生成和部署网站。</p><p><img src="/2019/01/20/Hexo+GitHub搭建个人博客入门/1547883931795.png" alt="1547883931795"></p><p>部署成功后访问网址：<code>http://用户名.github.io</code>,将看到部署成功的整个网站。</p><p>至此为止，最基本的hexo+github搭建个人博客基本完成，但是我们的博客还是太简陋了一些，接下来需要对博客进行一些雕琢。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo-GitHub搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-GitHub搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+GitHub搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+GitHub搭建个人博客&lt;/h2&gt;&lt;p&gt;&lt;em&gt;author：刘真真&lt;/em&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面：&lt;/strong&gt;去年三月份时候阿里云做活动就申请了一个域名，但是一直觉得搭建网站是一个比较麻烦的时候，就搁置了很久，在男朋友的鼓励下，遂决定好好捯饬一下自己的网站拿来写博客，开始一直担心自己做不出比较好的效果，后面渐渐将这种想法搁置，网上有非常多hexo的爱好者将自己的过程分享出来，基本上踩得坑都是前人遇到的，前人栽树后人乘凉，我也将搭建博客中一些关键性的步骤总结一下，以防后人跳坑。本人没有接触过前端知识，全凭谷歌和百度，所以有搭建个人网站想法的同学尽管去做，开始了第一步，后面的就不是问题了。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://izhen.tech/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://izhen.tech/tags/hexo/"/>
    
      <category term="github" scheme="http://izhen.tech/tags/github/"/>
    
      <category term="入门博客" scheme="http://izhen.tech/tags/%E5%85%A5%E9%97%A8%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>树莓派入门</title>
    <link href="http://izhen.tech/2019/01/18/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8/"/>
    <id>http://izhen.tech/2019/01/18/树莓派入门/</id>
    <published>2019-01-18T07:29:46.000Z</published>
    <updated>2019-01-20T07:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树莓派入门（控制LED灯）"><a href="#树莓派入门（控制LED灯）" class="headerlink" title="树莓派入门（控制LED灯）"></a>树莓派入门（控制LED灯）</h2><p>author： 刘真真</p><blockquote><p><strong>写在前面：</strong>树莓派是基于Linux的迷你主机，但功能完善，且预留了很多IO口给开发者扩展，比单片机的功能强大不少，可以将Python程序移植到树莓派上。本文简单介绍了新手如何使用树莓派和利用树莓派点亮一个LED灯。<br><a id="more"></a></p></blockquote><h3 id="一、板载资源-配件"><a href="#一、板载资源-配件" class="headerlink" title="一、板载资源+配件"></a>一、板载资源+配件</h3><p>树莓派是迷你主机，集成在一块电路板上。其型号为<code>Rsspberry Pi 三代B型</code>。</p><p><strong>电源 ：</strong>Micro USB 接口的手机充电器，输出5V2A</p><p><strong>Micro SD卡 </strong>：充当硬盘功能，大小最好在8G以上。</p><p><strong>显示器</strong>：HDMI接口的显示器，需要屏幕则接</p><p><strong>键盘</strong>：树莓派内置蓝牙，USB或蓝牙的无线键盘都可以用。需要时则配。</p><h3 id="二、电子元件"><a href="#二、电子元件" class="headerlink" title="二、电子元件"></a>二、电子元件</h3><p>1、面包板</p><p>2、一段公头一端母头的杜邦线</p><p>3、LED二极管</p><p>4、1K的电阻</p><h3 id="三、安装系统"><a href="#三、安装系统" class="headerlink" title="三、安装系统"></a>三、安装系统</h3><p><strong>1、下载树莓派系统</strong></p><p>网址: <a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/</a></p><p>选择需要的系统即可。这里我们选择树莓派官方的系统，预装了桌面和部分软件，如下图箭头所指。如果有一定的开源系统使用经验，可以选择最为轻量的只有操作系统的裸机。</p><p><img src="/2019/01/18/树莓派入门/1547626647217.png" alt="1547626647217"><strong>2、将SD卡格式化 </strong></p><p>​     直接在文件资源管理器中将SD卡格式化即可</p><p><strong>3、下载将系统导入内存卡的工具<a href="https:/etcher.io/" target="_blank" rel="noopener">etcher</a></strong></p><p>安装成功后打开，首先选择下载好的系统镜像文件，然后选择树莓派内存卡，点击<code>Flash</code>。</p><p>注意：<strong>在此过程中如果提示不可识别文件系统或者要格式化，直接点X关闭即可。</strong></p><p>flash完成后，将内存卡取下插入树莓派，开机即可查看新系统！</p><h3 id="四、SSH登录"><a href="#四、SSH登录" class="headerlink" title="四、SSH登录"></a>四、SSH登录</h3><p>安装系统之后，选择树莓派联网方式，树莓派有网线接口和WiFi芯片，用WiFi上网更加方便。在打开新系统时，搜索局域网输入密码即可。用SSH将电脑和树莓派系统连通，首先打开树莓派的SSH功能，在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>得到如下的设置</p><p><img src="/2019/01/18/树莓派入门/1547627677450.png" alt="1547627677450"></p><p>进入第五项<code>Interfacing Options</code>，然后选择<code>SSH</code>：</p><p><img src="/2019/01/18/树莓派入门/1547627761105.png" alt="1547627761105"></p><p>使能SSH即可。电脑和树莓派连接同一个路由器，在浏览器访问路由器的IP（192.168.1.1），查看树莓派的IP地址为192.168.1.101。在客户端输入树莓派的用户名 pi 和密码 123456：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh pi@192.168.1.101</span><br></pre></td></tr></table></figure><p>与树莓派建立连接。</p><h3 id="五、远程桌面"><a href="#五、远程桌面" class="headerlink" title="五、远程桌面"></a>五、远程桌面</h3><p>为了更加方便地操作树莓派，安装远程桌面。打开树莓派终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure><p>等待安装完成。</p><p>打开电脑的远程桌面</p><p><img src="/2019/01/18/树莓派入门/1547628303536.png" alt="1547628303536"></p><p>输入树莓派的IP地址，远程桌面操作，用户名<code>pi</code>， 密码<code>123456</code>，连接成功：</p><p><img src="/2019/01/18/树莓派入门/1547628392756.png" alt="1547628392756"></p><h3 id="六、点-亮-LED"><a href="#六、点-亮-LED" class="headerlink" title="六、点 亮 LED"></a>六、点 亮 LED</h3><p>树莓派提供了一组通用IO口，称为GPIO。40个引脚的定义与板上引脚资源对应如下</p><p><img src="/2019/01/18/树莓派入门/1547629540606.png" alt="1547629540606"></p><p><img src="/2019/01/18/树莓派入门/1547644021189.png" alt="1547644021189"></p><p>将树莓派和电子元器件连起来。注意二级管的正负极。正极接3.3V，负极通过电阻接地，可以看到二极管亮了。下面使用Node脚本控制LED。</p><p>首先，将接地的导线从GND针脚拔出，接到GPIO0.0即11号引脚。<strong>注意，3.3V的针脚是是有标识的为方的，其他针脚都是圆的。</strong>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rpio = <span class="built_in">require</span>(<span class="string">'rpio'</span>)</span><br><span class="line">rpio.open(<span class="number">11</span>, rpio.OUTPUT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blink</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    rpio.write(<span class="number">11</span>, rpio.HIGH);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">ledoff</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        rpio.write(<span class="number">11</span>, rpio.LOW);</span><br><span class="line">    &#125;,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(blink, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>用<code>node.js</code>稍作尝试，接下来轮到主角python出场了，Linux系统中很多功能是通过python实现的，且内嵌了python，无需安装，与python的兼容性极好，所以尝试用Python使LED闪烁。</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#author:lzz</span></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">GPIO.setwarnings(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BOARD)<span class="comment">#BCM和BOARD两种命名模式</span></span><br><span class="line">GPIO.setup(<span class="number">11</span>, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    GPIO.output(<span class="number">11</span>, GPIO.HIGH)</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    GPIO.output(<span class="number">11</span>, GPIO.LOW)</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><blockquote><p><strong>程序逻辑：</strong></p><p>1、导入GPIO的包</p><p>2、导入与时间包</p><p>3、设置GPIO针的命名方式，可用的有GPIO.BCM和GPIO.BOARD，分别代表boardcom命名系统和树莓派板子上的命名系统。</p><p>4、将引脚11设置为输出</p><p>5、控制引脚11的电平高低变换</p><p>6、清除掉之前RPi.GPIO.setup()设置的状态。退出程序前一定要调用，否则下次调用会出错。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;树莓派入门（控制LED灯）&quot;&gt;&lt;a href=&quot;#树莓派入门（控制LED灯）&quot; class=&quot;headerlink&quot; title=&quot;树莓派入门（控制LED灯）&quot;&gt;&lt;/a&gt;树莓派入门（控制LED灯）&lt;/h2&gt;&lt;p&gt;author： 刘真真&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面：&lt;/strong&gt;树莓派是基于Linux的迷你主机，但功能完善，且预留了很多IO口给开发者扩展，比单片机的功能强大不少，可以将Python程序移植到树莓派上。本文简单介绍了新手如何使用树莓派和利用树莓派点亮一个LED灯。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://izhen.tech/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://izhen.tech/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="入门" scheme="http://izhen.tech/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="LED" scheme="http://izhen.tech/tags/LED/"/>
    
  </entry>
  
  <entry>
    <title>Hello,Hexo!</title>
    <link href="http://izhen.tech/2019/01/17/Hello-Hexo/"/>
    <id>http://izhen.tech/2019/01/17/Hello-Hexo/</id>
    <published>2019-01-17T02:16:56.000Z</published>
    <updated>2019-01-18T02:22:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo，是一件非常简单的事情。测试文本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用hexo，是一件非常简单的事情。测试文本。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
